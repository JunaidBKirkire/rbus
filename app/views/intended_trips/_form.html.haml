- @bus_stops = BusStop.all(:order => [:name]).map{|b| "{label: '#{b.name}', value: #{b.id}, lat: #{b.lat}, lng: #{b.lng}}"}.join(",\n")
%script{:type => "text/javascript" , :src => "http://maps.googleapis.com/maps/api/js?key=#{Yetting.maps}&sensor=false"}
= javascript_include_tag 'map_functions'
:javascript
  var bus_stops = [#{@bus_stops}]
  function do_autocomplete(id) {
    $('#' + id).autocomplete({
      source: bus_stops,
      mustMatch: true,
      matchContains: true,
      focus: function( event, ui ) {
        $( "#" + id ).val( ui.item.label );
        try {
          c = new google.maps.LatLng(parseFloat(ui.item.lat), parseFloat(ui.item.lng))
          m.setPosition(c); 
          map.setCenter(c);
          map.setZoom(15);
        } catch(err) {}
        return false;
      },
      select: function(event, ui) {
        $('#' + id).val(ui.item.label);
        $('#intended_trip_' + id + '_stop_id').val(ui.item.value);
        try {
          c = new google.maps.LatLng(parseFloat(ui.item.lat), parseFloat(ui.item.lng))
          m.setPosition(c); 
          map.setCenter(c);
          map.setZoom(15);
          loadBusStops(map.getBounds());
        } catch(err) {}
        return false;
      },
      change: function(event, ui) {
        if (!(ui.item)) {
          $(this).val('');
          $('#intended_trip_' + id + '_stop_id').val('');
        }
      }
    })
    .data( "autocomplete" )._renderItem = function( ul, item ) {
      return $( "<li></li>" )
      .data( "item.autocomplete", item )
      .append( "<a>" + item.label  + "</a>" )
      .appendTo( ul );
    };
  }
  
  $(document).ready(function() {
    do_autocomplete('from');
    do_autocomplete('to');
    try {
      map = new google.maps.Map(document.getElementById("map"), { mapTypeId: google.maps.MapTypeId.ROADMAP, center: new google.maps.LatLng(19.09, 72.91), zoom: 11 });
      m = new google.maps.Marker({map: map, position: map.getCenter()});
      google.maps.event.addListener(map, 'moveend', function() {
        loadBusStops(map.getBounds());
      });
      google.maps.event.addListener(map, 'dragend', function() {
        loadBusStops(map.getBounds());
      });
    } catch(err) {}

  })

= form_for @intended_trip do |f|
  -if @intended_trip.errors.any? || (@intended_trip.user && @intended_trip.user.errors.any?)
    #error_explanation
      %h2= "#{pluralize(@intended_trip.errors.count + @intended_trip.user.errors.count, "error")} prohibited this intended_trip from being saved:"
      %ul
        - (@intended_trip.errors.full_messages + @intended_trip.user.errors.full_messages).each do |msg|
          %li= msg
  %label I live at
  = text_field_tag :from, params[:from], :class => "span4", :placeholder => "i.e. Malad West", :value => params[:from]
  = f.hidden_field :from_stop_id
  %br
  %label and work at
  = text_field_tag :to, params[:to], :class => "span4", :placeholder => "i.e. Bandra", :value => params[:to]
  = f.hidden_field :to_stop_id
  %br
  .row
    .span2
      &nbsp;
    .span3
      - if params[:action] == "index"
        %a{:style => "font-size: 1em", :href => "#not_on_list"}
          My bus stop is not listed
  %br
  %label on
  = f.select :on, ["weekdays", "weekdays and saturday", "all days"]
  %br
  - unless current_user
    = f.fields_for :user do |u|
      %label Email
      = u.text_field :email, :value => (params[:intended_trip][:user][:email] rescue nil)
      %br
      %label Password
      = u.text_field :password, :placeholder => "please choose a password", :type => "password", :value => (params[:intended_trip][:user][:password] rescue nil)
      %br
      %label Confirm Password
      = u.text_field :password_confirmation, :placeholder => "please type your password again", :type => "password", :value => (params[:intended_trip][:user][:password_confirmation] rescue nil)
  %br
  = f.submit "Register my Trip", :class => "btn btn-info"
  
